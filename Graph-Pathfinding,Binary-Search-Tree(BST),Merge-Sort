#include <iostream>
#include <vector>
#include <queue>
#include <climits>
#include <algorithm>
using namespace std;

class Graph {
    int vertices;
    vector<pair<int, int>>* adjList;

public:
    Graph(int v) {
        vertices = v;
        adjList = new vector<pair<int, int>>[v];
    }

    void addEdge(int u, int v, int weight) {
        adjList[u].push_back({ v, weight });
    }

    void dijkstra(int src, int dest) {
        vector<int> dist(vertices, INT_MAX);
        vector<int> parent(vertices, -1);
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        dist[src] = 0;
        pq.push({ 0, src });

        while (!pq.empty()) {
            int u = pq.top().second;
            pq.pop();

            for (auto& edge : adjList[u]) {
                int v = edge.first, weight = edge.second;
                if (dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                    pq.push({ dist[v], v });
                    parent[v] = u;
                }
            }
        }

        if (dist[dest] == INT_MAX) {
            cout << "No path found\n";
        }
        else {
            cout << "Shortest Path Cost: " << dist[dest] << "\nPath: ";
            vector<int> path;
            for (int v = dest; v != -1; v = parent[v])
                path.push_back(v);
            reverse(path.begin(), path.end());
            for (int v : path)
                cout << v << " ";
            cout << "\n";
        }
    }
};

struct TreeNode {
    int val;
    TreeNode* left, * right;
    TreeNode(int v) : val(v), left(nullptr), right(nullptr) {}
};

class BinarySearchTree {
    TreeNode* root;

    TreeNode* insertNode(TreeNode* node, int val) {
        if (!node) return new TreeNode(val);
        if (val < node->val) node->left = insertNode(node->left, val);
        else node->right = insertNode(node->right, val);
        return node;
    }

    TreeNode* deleteNode(TreeNode* node, int val) {
        if (!node) return nullptr;
        if (val < node->val) node->left = deleteNode(node->left, val);
        else if (val > node->val) node->right = deleteNode(node->right, val);
        else {
            if (!node->left) return node->right;
            if (!node->right) return node->left;
            TreeNode* minNode = node->right;
            while (minNode->left) minNode = minNode->left;
            node->val = minNode->val;
            node->right = deleteNode(node->right, minNode->val);
        }
        return node;
    }

    void inorder(TreeNode* node) {
        if (!node) return;
        inorder(node->left);
        cout << node->val << " ";
        inorder(node->right);
    }

    void preorder(TreeNode* node) {
        if (!node) return;
        cout << node->val << " ";
        preorder(node->left);
        preorder(node->right);
    }

    void postorder(TreeNode* node) {
        if (!node) return;
        postorder(node->left);
        postorder(node->right);
        cout << node->val << " ";
    }

public:
    BinarySearchTree() : root(nullptr) {}

    void insert(int val) {
        root = insertNode(root, val);
    }

    void deleteNode(int val) {
        root = deleteNode(root, val);
    }

    void display(int choice) {
        if (choice == 1) inorder(root);
        else if (choice == 2) preorder(root);
        else if (choice == 3) postorder(root);
        cout << "\n";
    }
};

void merge(vector<int>& arr, int left, int mid, int right, int& comparisons, int& swaps) {
    int n1 = mid - left + 1, n2 = right - mid;
    vector<int> L(n1), R(n2);
    for (int i = 0; i < n1; i++) L[i] = arr[left + i];
    for (int i = 0; i < n2; i++) R[i] = arr[mid + 1 + i];
    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        comparisons++;
        if (L[i] <= R[j]) arr[k++] = L[i++];
        else arr[k++] = R[j++];
        swaps++;
    }
    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];
}

void mergeSort(vector<int>& arr, int left, int right, int& comparisons, int& swaps) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid, comparisons, swaps);
        mergeSort(arr, mid + 1, right, comparisons, swaps);
        merge(arr, left, mid, right, comparisons, swaps);
    }
}

int partition(vector<int>& arr, int low, int high, int& comparisons, int& swaps) {
    int pivot = arr[high], i = low - 1;
    for (int j = low; j < high; j++) {
        comparisons++;
        if (arr[j] <= pivot) {
            swaps++;
            swap(arr[++i], arr[j]);
        }
    }
    swaps++;
    swap(arr[i + 1], arr[high]);
    return i + 1;
}

void quickSort(vector<int>& arr, int low, int high, int& comparisons, int& swaps) {
    if (low < high) {
        int pi = partition(arr, low, high, comparisons, swaps);
        quickSort(arr, low, pi - 1, comparisons, swaps);
        quickSort(arr, pi + 1, high, comparisons, swaps);
    }
}

int main() {
    int choice;
    while (true) {
        cout << "1. Graph Pathfinding\n2. Binary Search Tree\n3. Sorting Algorithms\n4. Exit\nEnter choice: ";
        cin >> choice;
        if (choice == 1) {
            int v, e, u, v1, weight, src, dest;
            cout << "Enter number of vertices and edges: ";
            cin >> v >> e;
            Graph g(v);
            for (int i = 0; i < e; i++) {
                cout << "Enter edge (u, v, weight): ";
                cin >> u >> v1 >> weight;
                g.addEdge(u, v1, weight);
            }
            cout << "Enter source and destination: ";
            cin >> src >> dest;
            g.dijkstra(src, dest);
        }
        else if (choice == 2) {
            BinarySearchTree bst;
            int op, val;
            while (true) {
                cout << "1. Insert\n2. Delete\n3. Display\n4. Back\nEnter choice: ";
                cin >> op;
                if (op == 1) {
                    cout << "Enter value to insert: ";
                    cin >> val;
                    bst.insert(val);
                }
                else if (op == 2) {
                    cout << "Enter value to delete: ";
                    cin >> val;
                    bst.deleteNode(val);
                }
                else if (op == 3) {
                    cout << "1. Inorder\n2. Preorder\n3. Postorder\nEnter choice: ";
                    cin >> val;
                    bst.display(val);
                }
                else if (op == 4) break;
            }
        }
        else if (choice == 3) {
            int n, comparisons = 0, swaps = 0;
            cout << "Enter size of array: ";
            cin >> n;
            vector<int> arr(n), arrCopy;
            cout << "Enter elements: ";
            for (int i = 0; i < n; i++) cin >> arr[i];
            arrCopy = arr;
            mergeSort(arr, 0, n - 1, comparisons, swaps);
            cout << "Merge Sort - Comparisons: " << comparisons << ", Swaps: " << swaps << "\nSorted Array: ";
            for (int x : arr) cout << x << " ";
            cout << "\n";
            comparisons = swaps = 0;
            quickSort(arrCopy, 0, n - 1, comparisons, swaps);
            cout << "Quick Sort - Comparisons: " << comparisons << ", Swaps: " << swaps << "\nSorted Array: ";
            for (int x : arrCopy) cout << x << " ";
            cout << "\n";
        }
        else if (choice == 4) break;
    }
    return 0;
}
